services:
  frontend:
    build:
      context: .
      dockerfile: ./services/frontend-service/Dockerfile
      args:
        NEXT_PUBLIC_AUTH_SERVICE_URL: ${NEXT_PUBLIC_AUTH_SERVICE_URL}
        NEXT_PUBLIC_ANALYTICS_SERVICE_URL: ${NEXT_PUBLIC_ANALYTICS_SERVICE_URL}
    ports:
      - "3000:3000"
    depends_on:
      - analytics
      - auth

  auth:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    ports:
      - "5002:5002"
    environment:
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - TOKEN_EXPIRATION=${TOKEN_EXPIRATION}
      - REFRESH_TOKEN_EXPIRATION=${REFRESH_TOKEN_EXPIRATION}
      - POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - FRONTEND_SERVICE_URL=${FRONTEND_SERVICE_URL}
      - ANALYTICS_API_SERVICE_URL=${ANALYTICS_API_SERVICE_URL}
    depends_on:
      - postgres

  analytics:
    build:
      context: .
      dockerfile: ./services/analytics-api-service/Dockerfile
    ports:
      - "5003:5003"
    environment:
      - POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - FRONTEND_SERVICE_URL=${FRONTEND_SERVICE_URL}
    depends_on:
      - auth
      - postgres

  tracking:
    build:
      context: .
      dockerfile: ./services/tracking-service/Dockerfile
    ports:
      - "5001:5001"
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - rabbitmq
      - postgres
      - data_processing

  data_processing:
    build:
      context: .
      dockerfile: ./services/data-processing-service/Dockerfile
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - QUEUE_NAME=${QUEUE_NAME}
      - POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - IP_API_TOKEN=${IP_API_TOKEN}
    depends_on:
      - rabbitmq
      - postgres

  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schemas:/docker-entrypoint-initdb.d

volumes:
  postgres_data:
